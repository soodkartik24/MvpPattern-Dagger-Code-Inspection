import com.github.spotbugs.SpotBugsTask

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.kotlin_version = '1.3.70'
    ext.core_kotlin_version = '1.2.0'
    ext.retrofitVersion = '2.6.0'
    ext.junit_version = '4.13'
    ext.retrofitAdapterVersion = '2.3.0'
    ext.retrofitGsonversion = '2.4.0'
    ext.appcompatVersion = '1.1.0'
    ext.constraintLayoutVersion = '1.1.3'
    ext.google_material_version = '1.1.0'
    ext.glide_version = '4.11.0'
    ext.firebase_analytics_version = '17.2.3'
    ext.firebase_messaging_version = '20.1.3'
    ext.google_services_version = '4.3.3'
    ext.fabric_tool_version = '1.31.2'
    ext.lib_phone_number = '8.10.16'
    ext.event_bus_version = '3.1.1'
    ext.zelory_compressor_version = '2.1.0'
    ext.gradle_version = '3.6.1'
    ext.coroutine_version = '1.3.1'
    ext.dagger_version = '2.25'
    ext.dagger_compiler_version = '2.25'
    ext.spot_bugs_version = '2.0.1'
    repositories {
        google()
        jcenter()
        maven {
            url 'https://maven.fabric.io/public'
        }
        maven {
            url "https://plugins.gradle.org/m2/" // For SpotBugs
        }
    }
    dependencies {
        classpath "com.android.tools.build:gradle:$gradle_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "io.fabric.tools:gradle:$fabric_tool_version"
        classpath "com.github.spotbugs:spotbugs-gradle-plugin:$spot_bugs_version"
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        maven {
            url 'https://maven.fabric.io/public'
        }

        task checkstyle(type: Checkstyle) {
            showViolations = true
            configFile file("config/checkstyle/checkstyle.xml")

            source 'src/main/java'
            include '**/*.java'
            exclude '**/gen/**'
            exclude '**/R.java'
            exclude '**/BuildConfig.java'

            // empty classpath
            classpath = files()
        }

        task pmd(type: Pmd) {
            description 'Identifying potential problems mainly dead code, duplicated code, cyclomatic complexity and overcomplicated expressions'
            group 'verification'
            ruleSetFiles = files("$project.rootDir/tools/rules-pmd.xml")
            source = fileTree('src/main/java')
            include '**/*.java'
            exclude '**/gen/**'

            reports {
                xml.enabled = false
                html.enabled = true
                html.destination(file("$project.buildDir/outputs/pmd/pmd.html"))
            }
        }

        tasks.withType(SpotBugsTask) {
            dependsOn 'assembleDebug'
            classes = files("$project.buildDir/intermediates/javac") // Important to use this path
            excludeFilter = file("$project/spot-bugs-exclude.xml") // Optional - Explained below
            source = fileTree('src/main/java')
            reports {
                // Enable HTML report only
                html.enabled = true
                xml.enabled = false
                html.destination = file("$project.buildDir/outputs/spotbugs/spotbugs.html")
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
